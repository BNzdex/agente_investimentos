# demo_completo.py - Demonstra√ß√£o completa do sistema
"""
AGENTE IA DE INVESTIMENTOS - DEMONSTRA√á√ÉO COMPLETA
Sistema integrado de an√°lise de investimentos com web scraping
"""

import sys
import os
import time
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Importa m√≥dulos do sistema
try:
    from agente_ia_investimentos import AgenteIAInvestimentos
    from coletor_web_avancado import ColetorWebAvancado, AgenteInvestimentosAprimorado
    from configuracao import ConfiguracaoAgente, FontesDados
    from utilitarios import configurar_logging, salvar_backup_dados
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print("Certifique-se de que todos os arquivos est√£o no mesmo diret√≥rio")
    sys.exit(1)

class DemonstradorSistema:
    """
    Classe para demonstrar todas as funcionalidades do sistema
    """
    
    def __init__(self):
        self.logger = configurar_logging()
        self.config = ConfiguracaoAgente()
        self.fontes = FontesDados()
        
        print("ü§ñ SISTEMA AGENTE IA DE INVESTIMENTOS")
        print("=" * 60)
        print("Sistema inicializado com sucesso!")
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("=" * 60)
    
    def demonstrar_analise_basica(self):
        """Demonstra an√°lise b√°sica sem web scraping"""
        print("\nüîç DEMONSTRA√á√ÉO: AN√ÅLISE B√ÅSICA")
        print("-" * 40)
        
        try:
            # Inicializa agente b√°sico
            agente = AgenteIAInvestimentos()
            
            # Testa para cada perfil de risco
            perfis = ['conservador', 'moderado', 'arrojado']
            
            for perfil in perfis:
                print(f"\nüìä Analisando perfil: {perfil.upper()}")
                print("." * 30)
                
                # Executa an√°lise
                resultados = agente.executar_analise_completa(perfil)
                
                # Exibe resumo
                print(f"‚úÖ An√°lise conclu√≠da para {perfil}")
                print(f"   Retorno esperado: {resultados['recomendacao']['retorno_esperado']:.1f}%")
                print(f"   Investimentos recomendados: {len(resultados['recomendacao']['detalhes_carteira'])}")
                
                # Salva backup
                nome_backup = f"backup_analise_basica_{perfil}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                caminho_backup = salvar_backup_dados(resultados, nome_backup)
                print(f"   Backup salvo: {caminho_backup}")
                
                time.sleep(2)  # Pausa entre an√°lises
            
            print("\n‚úÖ Demonstra√ß√£o de an√°lise b√°sica conclu√≠da!")
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise b√°sica: {str(e)}")
            self.logger.error(f"Erro na an√°lise b√°sica: {str(e)}")
    
    def demonstrar_web_scraping(self):
        """Demonstra funcionalidades de web scraping"""
        print("\nüåê DEMONSTRA√á√ÉO: WEB SCRAPING")
        print("-" * 40)
        
        try:
            # Inicializa coletor web
            coletor = ColetorWebAvancado()
            
            print("üì∞ Coletando not√≠cias financeiras...")
            
            # Coleta not√≠cias do InfoMoney
            noticias_infomoney = coletor.coletar_noticias_infomoney(max_artigos=5)
            print(f"   InfoMoney: {len(noticias_infomoney)} not√≠cias")
            
            # Coleta dados do Investing
            dados_investing = coletor.coletar_dados_investing()
            print(f"   Investing: {len(dados_investing)} indicadores")
            
            # Coleta recomenda√ß√µes da Suno
            recomendacoes_suno = coletor.coletar_recomendacoes_suno()
            print(f"   Suno: {len(recomendacoes_suno)} recomenda√ß√µes")
            
            # An√°lise de sentimento
            todas_noticias = noticias_infomoney + recomendacoes_suno
            relatorio_sentimento = coletor.gerar_relatorio_sentimento_mercado(todas_noticias)
            
            print(f"\nüìä An√°lise de Sentimento:")
            print(f"   Sentimento geral: {relatorio_sentimento.get('sentimento_geral', 'N/A')}")
            print(f"   Confian√ßa: {relatorio_sentimento.get('confianca', 0):.2f}")
            print(f"   Artigos positivos: {relatorio_sentimento.get('artigos_positivos', 0)}")
            print(f"   Artigos negativos: {relatorio_sentimento.get('artigos_negativos', 0)}")
            
            # Salva resultados
            resultados_web = {
                'noticias_infomoney': noticias_infomoney,
                'dados_investing': dados_investing,
                'recomendacoes_suno': recomendacoes_suno,
                'relatorio_sentimento': relatorio_sentimento
            }
            
            nome_backup = f"backup_web_scraping_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            caminho_backup = salvar_backup_dados(resultados_web, nome_backup)
            print(f"\nüíæ Dados salvos: {caminho_backup}")
            
            print("\n‚úÖ Demonstra√ß√£o de web scraping conclu√≠da!")
            
        except Exception as e:
            print(f"‚ùå Erro no web scraping: {str(e)}")
            self.logger.error(f"Erro no web scraping: {str(e)}")
    
    def demonstrar_analise_completa(self):
        """Demonstra an√°lise completa integrando todos os m√≥dulos"""
        print("\nüöÄ DEMONSTRA√á√ÉO: AN√ÅLISE COMPLETA INTEGRADA")
        print("-" * 50)
        
        try:
            # Inicializa agente aprimorado
            agente_aprimorado = AgenteInvestimentosAprimorado()
            
            print("üîÑ Executando an√°lise completa com web scraping...")
            print("   (Isso pode levar alguns minutos)")
            
            # Executa an√°lise para perfil moderado
            resultados_completos = agente_aprimorado.executar_analise_aprimorada('moderado')
            
            print("\nüìä RESULTADOS DA AN√ÅLISE COMPLETA:")
            print("-" * 40)
            
            # An√°lise de mercado
            sentimento = resultados_completos['sentimento_mercado']
            print(f"Sentimento do Mercado: {sentimento.get('sentimento_geral', 'N/A').upper()}")
            print(f"Confian√ßa do Sentimento: {sentimento.get('confianca', 0):.2f}")
            
            # Recomenda√ß√µes de carteira
            recomendacao = resultados_completos['recomendacao']
            print(f"\nCarteira Recomendada ({recomendacao['perfil'].title()}):")
            for detalhe in recomendacao['detalhes_carteira']:
                print(f"  ‚Ä¢ {detalhe['alocacao']:2d}% em {detalhe['investimento']}")
                print(f"    Retorno esperado: {detalhe['retorno_esperado']:.1f}%")
            
            # Insights de not√≠cias
            insights = resultados_completos['insights_noticias']
            print(f"\nAtivos em Tend√™ncia:")
            for ativo, mencoes in insights.get('ativos_tendencia', [])[:3]:
                print(f"  ‚Ä¢ {ativo.upper()}: {mencoes} men√ß√µes")
            
            # Resumo de recomenda√ß√µes
            resumo_rec = resultados_completos['resumo_recomendacoes']
            print(f"\nResumo de Recomenda√ß√µes:")
            print(f"  ‚Ä¢ Sinais de compra: {resumo_rec.get('sinais_compra', 0)}")
            print(f"  ‚Ä¢ Sinais de venda: {resumo_rec.get('sinais_venda', 0)}")
            print(f"  ‚Ä¢ Propor√ß√£o compra: {resumo_rec.get('proporcao_compra', 0):.1%}")
            
            # Salva backup completo
            nome_backup = f"backup_analise_completa_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            caminho_backup = salvar_backup_dados(resultados_completos, nome_backup)
            print(f"\nüíæ An√°lise completa salva: {caminho_backup}")
            
            print("\n‚úÖ Demonstra√ß√£o completa finalizada!")
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise completa: {str(e)}")
            self.logger.error(f"Erro na an√°lise completa: {str(e)}")
    
    def demonstrar_configuracoes(self):
        """Demonstra configura√ß√µes do sistema"""
        print("\n‚öôÔ∏è DEMONSTRA√á√ÉO: CONFIGURA√á√ïES DO SISTEMA")
        print("-" * 45)
        
        print("üìã Configura√ß√µes Gerais:")
        print(f"   Perfil padr√£o: {self.config.PERFIL_RISCO_PADRAO}")
        print(f"   Max artigos por fonte: {self.config.MAX_ARTIGOS_POR_FONTE}")
        print(f"   Timeout requisi√ß√µes: {self.config.TIMEOUT_REQUISICAO}s")
        
        print("\nüìä Perfis de Carteira Dispon√≠veis:")
        for nome_perfil, dados_perfil in self.config.PERFIS_CARTEIRA.items():
            print(f"   {nome_perfil.upper()}:")
            print(f"     Renda Fixa: {dados_perfil['renda_fixa']}%")
            print(f"     Renda Vari√°vel: {dados_perfil['renda_variavel']}%")
            print(f"     FIIs: {dados_perfil['fiis']}%")
            print(f"     Internacional: {dados_perfil['internacional']}%")
            print(f"     Retorno Esperado: {dados_perfil['retorno_esperado']}%")
        
        print("\nüåê Fontes de Dados Configuradas:")
        for nome_fonte, url in list(self.fontes.SITES_FINANCEIROS.items())[:5]:
            print(f"   {nome_fonte}: {url}")
        
        print(f"\nüîç Palavras-chave monitoradas: {len(self.fontes.PALAVRAS_CHAVE_NOTICIAS)}")
        print(f"   Exemplos: {', '.join(self.fontes.PALAVRAS_CHAVE_NOTICIAS[:10])}")
    
    def demonstrar_utilitarios(self):
        """Demonstra fun√ß√µes utilit√°rias"""
        print("\nüõ†Ô∏è DEMONSTRA√á√ÉO: FUN√á√ïES UTILIT√ÅRIAS")
        print("-" * 40)
        
        from utilitarios import (
            limpar_dados_numericos, calcular_sharpe_ratio, 
            calcular_drawdown_maximo, formatar_numero_brasileiro,
            obter_cor_performance
        )
        
        # Teste de limpeza de dados
        print("üßπ Limpeza de Dados:")
        valores_teste = ["R$ 1.234,56", "12.5%", "1,000.50", None, "abc123def"]
        for valor in valores_teste:
            valor_limpo = limpar_dados_numericos(valor)
            print(f"   '{valor}' -> {valor_limpo}")
        
        # Teste de Sharpe Ratio
        print("\nüìà C√°lculo Sharpe Ratio:")
        retornos_exemplo = [0.12, 0.15, 0.08, 0.20, 0.11, 0.18]
        sharpe = calcular_sharpe_ratio(retornos_exemplo)
        print(f"   Retornos: {retornos_exemplo}")
        print(f"   Sharpe Ratio: {sharpe:.3f}")
        
        # Teste de Drawdown
        print("\nüìâ C√°lculo Drawdown M√°ximo:")
        precos_exemplo = [100, 105, 98, 110, 95, 108, 92, 115]
        drawdown = calcular_drawdown_maximo(precos_exemplo)
        print(f"   Pre√ßos: {precos_exemplo}")
        print(f"   Drawdown M√°ximo: {drawdown:.1%}")
        
        # Teste de formata√ß√£o
        print("\nüî¢ Formata√ß√£o Brasileira:")
        numeros_teste = [1234.56, 1000000.789, 0.123, None]
        for numero in numeros_teste:
            formatado = formatar_numero_brasileiro(numero)
            print(f"   {numero} -> {formatado}")
        
        # Teste de cores por performance
        print("\nüé® Cores por Performance:")
        performances = [15.5, 7.2, 2.1, -3.4]
        for perf in performances:
            cor = obter_cor_performance(perf)
            print(f"   {perf:+.1f}% -> {cor}")
    
    def gerar_relatorio_demonstracao(self):
        """Gera relat√≥rio da demonstra√ß√£o"""
        print("\nüìÑ GERANDO RELAT√ìRIO DA DEMONSTRA√á√ÉO")
        print("-" * 40)
        
        relatorio = f"""
================================================================================
                    ü§ñ RELAT√ìRIO DE DEMONSTRA√á√ÉO - AGENTE IA
                         Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
================================================================================

üéØ RESUMO DA DEMONSTRA√á√ÉO

Este relat√≥rio documenta a execu√ß√£o completa da demonstra√ß√£o do Sistema 
Agente IA de Investimentos, incluindo todas as funcionalidades principais.

üìä M√ìDULOS DEMONSTRADOS:

‚úÖ AN√ÅLISE B√ÅSICA
   ‚Ä¢ Coleta de dados de mercado via Yahoo Finance
   ‚Ä¢ An√°lise de m√∫ltiplas classes de ativos
   ‚Ä¢ Gera√ß√£o de recomenda√ß√µes por perfil de risco
   ‚Ä¢ Cria√ß√£o de visualiza√ß√µes e relat√≥rios

‚úÖ WEB SCRAPING AVAN√áADO  
   ‚Ä¢ Coleta de not√≠cias do InfoMoney
   ‚Ä¢ Extra√ß√£o de dados do Investing.com
   ‚Ä¢ An√°lise de recomenda√ß√µes da Suno Research
   ‚Ä¢ Processamento de sentimento de mercado

‚úÖ AN√ÅLISE INTEGRADA
   ‚Ä¢ Combina√ß√£o de dados de mercado e web
   ‚Ä¢ Gera√ß√£o de insights avan√ßados
   ‚Ä¢ Identifica√ß√£o de ativos em tend√™ncia
   ‚Ä¢ Alertas de risco automatizados

‚úÖ SISTEMA DE CONFIGURA√á√ÉO
   ‚Ä¢ Perfis de risco personaliz√°veis
   ‚Ä¢ Fontes de dados configur√°veis
   ‚Ä¢ Par√¢metros de an√°lise ajust√°veis

‚úÖ FUN√á√ïES UTILIT√ÅRIAS
   ‚Ä¢ Limpeza e valida√ß√£o de dados
   ‚Ä¢ C√°lculos financeiros (Sharpe, Drawdown)
   ‚Ä¢ Formata√ß√£o e visualiza√ß√£o
   ‚Ä¢ Sistema de logging e backup

üîß ARQUITETURA DO SISTEMA:

CAMADA DE DADOS:
‚îú‚îÄ‚îÄ Yahoo Finance API (dados de mercado)
‚îú‚îÄ‚îÄ Web Scraping (not√≠cias e an√°lises)
‚îî‚îÄ‚îÄ Configura√ß√µes locais

CAMADA DE PROCESSAMENTO:
‚îú‚îÄ‚îÄ An√°lise quantitativa
‚îú‚îÄ‚îÄ Processamento de linguagem natural
‚îú‚îÄ‚îÄ An√°lise de sentimento
‚îî‚îÄ‚îÄ Algoritmos de recomenda√ß√£o

CAMADA DE APRESENTA√á√ÉO:
‚îú‚îÄ‚îÄ Relat√≥rios em texto
‚îú‚îÄ‚îÄ Gr√°ficos e visualiza√ß√µes
‚îú‚îÄ‚îÄ Exporta√ß√£o de dados
‚îî‚îÄ‚îÄ Interface de linha de comando

üí° PRINCIPAIS CARACTER√çSTICAS:

‚Ä¢ An√°lise multi-ativo (RF, RV, FIIs, Internacional)
‚Ä¢ Personaliza√ß√£o por perfil de risco
‚Ä¢ Coleta de dados em tempo real
‚Ä¢ An√°lise de sentimento de mercado
‚Ä¢ Gera√ß√£o automatizada de relat√≥rios
‚Ä¢ Sistema de backup e logging
‚Ä¢ Arquitetura modular e extens√≠vel

‚ö†Ô∏è LIMITA√á√ïES E CONSIDERA√á√ïES:

‚Ä¢ Dados dependem da disponibilidade das APIs
‚Ä¢ Web scraping sujeito a mudan√ßas nos sites
‚Ä¢ An√°lise de sentimento √© aproximativa
‚Ä¢ N√£o constitui recomenda√ß√£o de investimento
‚Ä¢ Requer valida√ß√£o por profissional qualificado

üöÄ PR√ìXIMOS PASSOS:

‚Ä¢ Integra√ß√£o com mais fontes de dados
‚Ä¢ Machine Learning para predi√ß√µes
‚Ä¢ Interface gr√°fica (GUI)
‚Ä¢ API REST para integra√ß√£o
‚Ä¢ Dashboard em tempo real
‚Ä¢ Alertas por email/SMS

üìä ESTAT√çSTICAS DA DEMONSTRA√á√ÉO:

‚Ä¢ Tempo total de execu√ß√£o: ~{(datetime.now() - datetime.now()).seconds} segundos
‚Ä¢ M√≥dulos testados: 5/5
‚Ä¢ Fontes de dados: {len(self.fontes.SITES_FINANCEIROS)}
‚Ä¢ Perfis de risco: {len(self.config.PERFIS_CARTEIRA)}
‚Ä¢ Classes de ativos: 4+ (RF, RV, FIIs, Internacional)

================================================================================
                    Demonstra√ß√£o conclu√≠da com sucesso! ‚úÖ
                        {datetime.now().strftime('%d/%m/%Y %H:%M')}
================================================================================
"""
        
        # Salva relat√≥rio
        nome_arquivo = f"relatorio_demonstracao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            f.write(relatorio)
        
        print(f"üìÅ Relat√≥rio salvo: {nome_arquivo}")
        return nome_arquivo
    
    def executar_demonstracao_completa(self):
        """Executa demonstra√ß√£o completa de todo o sistema"""
        print("\nüöÄ INICIANDO DEMONSTRA√á√ÉO COMPLETA DO SISTEMA")
        print("=" * 60)
        
        inicio = datetime.now()
        
        try:
            # 1. Demonstra an√°lise b√°sica
            self.demonstrar_analise_basica()
            
            print("\n" + "‚è∏Ô∏è " * 20)
            input("Pressione Enter para continuar com web scraping...")
            
            # 2. Demonstra web scraping
            self.demonstrar_web_scraping()
            
            print("\n" + "‚è∏Ô∏è " * 20)
            input("Pressione Enter para continuar com an√°lise completa...")
            
            # 3. Demonstra an√°lise completa
            self.demonstrar_analise_completa()
            
            print("\n" + "‚è∏Ô∏è " * 20)
            input("Pressione Enter para ver configura√ß√µes...")
            
            # 4. Demonstra configura√ß√µes
            self.demonstrar_configuracoes()
            
            # 5. Demonstra utilit√°rios
            self.demonstrar_utilitarios()
            
            # 6. Gera relat√≥rio final
            arquivo_relatorio = self.gerar_relatorio_demonstracao()
            
            fim = datetime.now()
            tempo_total = fim - inicio
            
            print("\n" + "=" * 60)
            print("üéâ DEMONSTRA√á√ÉO COMPLETA FINALIZADA!")
            print("=" * 60)
            print(f"‚è±Ô∏è Tempo total: {tempo_total}")
            print(f"üìÅ Relat√≥rio: {arquivo_relatorio}")
            print(f"üìä Todos os arquivos gerados est√£o no diret√≥rio atual")
            print("=" * 60)
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Demonstra√ß√£o interrompida pelo usu√°rio")
        except Exception as e:
            print(f"\n‚ùå Erro durante a demonstra√ß√£o: {str(e)}")
            self.logger.error(f"Erro na demonstra√ß√£o: {str(e)}")

def menu_demonstracao():
    """Menu interativo para sele√ß√£o de demonstra√ß√µes"""
    demonstrador = DemonstradorSistema()
    
    while True:
        print("\n" + "=" * 60)
        print("üé≠ MENU DE DEMONSTRA√á√ïES")
        print("=" * 60)
        print("1. Demonstra√ß√£o Completa (Todos os m√≥dulos)")
        print("2. Apenas An√°lise B√°sica")
        print("3. Apenas Web Scraping")
        print("4. Apenas An√°lise Integrada")
        print("5. Ver Configura√ß√µes")
        print("6. Testar Utilit√°rios")
        print("0. Sair")
        print("=" * 60)
        
        escolha = input("Digite sua escolha: ").strip()
        
        if escolha == '1':
            demonstrador.executar_demonstracao_completa()
        elif escolha == '2':
            demonstrador.demonstrar_analise_basica()
        elif escolha == '3':
            demonstrador.demonstrar_web_scraping()
        elif escolha == '4':
            demonstrador.demonstrar_analise_completa()
        elif escolha == '5':
            demonstrador.demonstrar_configuracoes()
        elif escolha == '6':
            demonstrador.demonstrar_utilitarios()
        elif escolha == '0':
            print("üëã Saindo da demonstra√ß√£o. At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
        
        if escolha != '0':
            input("\nPressione Enter para voltar ao menu...")

def verificar_dependencias():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    print("üîç Verificando depend√™ncias...")
    
    dependencias_obrigatorias = [
        'requests', 'pandas', 'numpy', 'matplotlib', 
        'seaborn', 'beautifulsoup4', 'yfinance'
    ]
    
    dependencias_faltando = []
    
    for dep in dependencias_obrigatorias:
        try:
            __import__(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            dependencias_faltando.append(dep)
            print(f"‚ùå {dep}")
    
    if dependencias_faltando:
        print(f"\n‚ö†Ô∏è Depend√™ncias faltando: {', '.join(dependencias_faltando)}")
        print("Execute: python instalar_dependencias.py")
        return False
    
    print("‚úÖ Todas as depend√™ncias est√£o instaladas!")
    return True

if __name__ == "__main__":
    print("ü§ñ SISTEMA AGENTE IA DE INVESTIMENTOS - DEMO COMPLETO")
    print("=" * 60)
    print("Bem-vindo √† demonstra√ß√£o completa do sistema!")
    print("Este script demonstra todas as funcionalidades dispon√≠veis.")
    print("=" * 60)
    
    # Verifica depend√™ncias
    if not verificar_dependencias():
        print("\n‚ùå N√£o √© poss√≠vel continuar sem as depend√™ncias.")
        sys.exit(1)
    
    try:
        # Executa menu de demonstra√ß√£o
        menu_demonstracao()
        
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrompido pelo usu√°rio. At√© logo!")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
        print("Verifique os logs para mais detalhes.")
    finally:
        print("\nüîö Fim da demonstra√ß√£o.")
        print("Obrigado por testar o Sistema Agente IA de Investimentos!")